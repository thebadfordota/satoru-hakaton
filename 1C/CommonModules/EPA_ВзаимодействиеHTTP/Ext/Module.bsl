Функция СтруктуруВJSON(JSONСтруктура) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, JSONСтруктура);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	Возврат СтрокаJSON;
	
КонецФункции 

Функция JSONВСоответствие(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	СоответствиеJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	Возврат СоответствиеJSON;
	
КонецФункции

Функция Авторизоваться(Пользователь, Пароль, ПользовательID) Экспорт
	
	Соединение = Новый HTTPСоединение(Константы.EPA_URL.Получить());	
	
	Запрос = Новый HTTPЗапрос("/api/auth/jwt/login");
	Запрос.Заголовки.Вставить("Content-type", "application/x-www-form-urlencoded"); 
	
	СтрокаТела = СтрШаблон("username=%1&password=%2", Пользователь, Пароль);
	
	Запрос.УстановитьТелоИзСтроки(СтрокаТела, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда 
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		СоотвДанные = JSONВСоответствие(ТелоОтвета);
		ПараметрыСеанса.EPA_ТокенДоступа = СоотвДанные.Получить("access_token");	
		Возврат Истина;	
	Иначе
		Возврат Ложь
	КонецЕсли;
	
КонецФункции

// Функция - Зарегестрировать пользователя
//
// Параметры:
//  ДанныеПользователя	 - Структура:
//	 * email - Строка
//	 * password - Строка 
//	 * is_active - Строка 
//	 * is_superuser - Строка 
//	 * is_verified - Строка 
//	 * username - Строка 
//	 * first_name - Строка 
//	 * last_name - Строка 
//	 * patronymic - Строка 
//	 * position - Строка 
//	 * task_type - Строка 
//  Соединение			 - HTTPСоединение
// 
// Возвращаемое значение:
//   - HTTPОтвет
//
Функция ЗарегестрироватьПользователя(ДанныеПользователя, Соединение=Неопределено) Экспорт
	
	Если Соединение = Неопределено Тогда
		Соединение = Новый HTTPСоединение(Константы.EPA_URL.Получить());		
	КонецЕсли;
	
	Запрос = Новый HTTPЗапрос("/api/auth/register");
	Запрос.Заголовки.Вставить("Content-type", "application/json");
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + ПараметрыСеанса.EPA_ТокенДоступа);
	
	Запрос.УстановитьТелоИзСтроки(СтруктуруВJSON(ДанныеПользователя));
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
	Возврат Ответ;
	
КонецФункции

// Функция - Зарегестировать массив пользователей
//
// Параметры:
//  МассивПользователей	 - Структура
//	 * Пользователь - Справочник.Пользователи
//	 * УровеньЗаданй - Перечисление.EPA_СложностьЗаданий
// 
// Возвращаемое значение:
//   - Структура 
//
Функция ЗарегестироватьМассивПользователей(ДанныеПользователей) Экспорт
		
	Соединение = Новый HTTPСоединение(Константы.EPA_URL.Получить());
	
	Данные = EPA_ОбработчикиСлужебное.ПолучитьДанныеПользователя(ДанныеПользователей);
	
	Для Каждого ДанныеПользователя Из Данные Цикл
		
		Ответ = ЗарегестрироватьПользователя(ДанныеПользователя.Значение, Соединение);
		
		Если Ответ.КодСостояния >=200 И Ответ.КодСостояния <=299 Тогда	
			СоответствиеJSON = JSONВСоответствие(Ответ.ПолучитьТелоКакСтроку());
			РегистрыСведений.EPA_НастройкиПользователей.ЗаполнитьДанныеПользователя(ДанныеПользователя.Ключ, СоответствиеJSON);
		КонецЕсли;
		
	КонецЦикла;
		
КонецФункции

Функция УдалитьПользователей(МассивПользователей) Экспорт 
	
	Соединение = Новый HTTPСоединение(Константы.EPA_URL.Получить());		
	
	Данные = EPA_ОбработчикиСлужебное.ПолучитьДанныеПользователя(МассивПользователей);
	
	Для Каждого ДанныеПользователя Из Данные Цикл
		
		Запрос = Новый HTTPЗапрос("/api/auth/register");
		Запрос.Заголовки.Вставить("Content-type", "application/json");
		Запрос.УстановитьТелоИзСтроки(СтруктуруВJSON(ДанныеПользователя)); 
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
	КонецЦикла;
	
	
КонецФункции

Функция ЗапроситьДанныеПользователей() Экспорт

	Соединение = Новый HTTPСоединение(Константы.EPA_URL.Получить());		
	
	Запрос = Новый HTTPЗапрос("/api/users");
	Запрос.Заголовки.Вставить("Content-type", "application/json");
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + ПараметрыСеанса.EPA_ТокенДоступа);
	
	Ответ = Соединение.Получить(Запрос);
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Успешно", Ответ.КодСостояния >=200 И Ответ.КодСостояния <=299);
	СоответствиеJSON = JSONВСоответствие(Ответ.ПолучитьТелоКакСтроку());
	
	Если Ответ.КодСостояния >=200 И Ответ.КодСостояния <=299 Тогда
		Для Каждого ЕдДанных Из СоответствиеJSON Цикл
			
			email = ЕдДанных.Получить("email");
			username = ЕдДанных.Получить("username");
			НайденныйПользователь = ПользователиИнформационнойБазы.НайтиПоИмени(username);
			
			Если НайденныйПользователь <> Неопределено Тогда
				РегистрыСведений.EPA_НастройкиПользователей.ЗаполнитьДанныеПользователя(НайденныйПользователь, ЕдДанных); 
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
		
	Возврат СтруктураВозврата;

КонецФункции

Функция ПодтвердитьДействие() Экспорт

	Соединение = Новый HTTPСоединение(Константы.EPA_URL.Получить());		
	
	Запрос = Новый HTTPЗапрос("/api/action/verify");
	Запрос.Заголовки.Вставить("Content-type", "application/json");
	Запрос.Заголовки.Вставить("Authorization", "Bearer " + ПараметрыСеанса.EPA_ТокенДоступа);
	
	Ответ = Соединение.ОтправитьДляОбработки(Запрос);
	
	Возврат Ответ.КодСостояния >=200 И Ответ.КодСостояния <=299;

КонецФункции